{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["fetch","require","App","useState","sentence","setSentence","updateSentence","now","Date","getDay","getHours","getMinutes","difference","method","headers","Authorization","then","response","console","log","status","json","catch","error","useEffect","interval","setInterval","clearInterval","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yOAEMA,G,MAAQC,EAAQ,KAkEPC,MAhEf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,KAGPC,EAAiB,WACrB,IAAIC,EAAM,IAAIC,KACd,GAAqB,IAAjBD,EAAIE,SACNJ,EAAY,2BAEZ,GAAIE,EAAIG,WAAa,GACnBL,EAAY,2DACP,GAAIE,EAAIG,WAAa,GAC1BL,EAAY,2DACP,GAAIE,EAAIG,WAAa,IAAMH,EAAII,aAAe,GAAI,CACvD,IAAIC,EAAa,GAAKL,EAAII,aAC1BN,EAAY,oBAAD,OAAqBO,EAArB,6BACFL,EAAIG,WAAa,GAC1BL,EAAY,sBAEZA,EAAY,yCAqClB,OAhCAL,EAAM,kCAAmC,CACvCa,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChBC,cACE,sEAGHC,MAAK,SAACC,GAEL,GADAC,QAAQC,IAAI,MAAOF,GACK,MAApBA,EAASG,OAQb,OAFAF,QAAQC,IAAI,MAAOF,GACnBC,QAAQC,IAAI,OAAQF,EAASI,QACtBJ,EAASI,OAPdH,QAAQC,IACN,gDAAkDF,EAASG,WAQhEJ,MAAK,SAACK,GAAD,OAAUH,QAAQC,IAAIE,MAC3BC,OAAM,SAACC,GACNL,QAAQK,MAAM,YAAcA,MAGhCC,qBAAU,WACRlB,IACA,IAAMmB,EAAWC,YAAYpB,EAAgB,KAE7C,OAAO,kBAAMqB,cAAcF,OAI3B,yBAAKG,UAAU,OACb,4BAAQA,UAAU,cAChB,uBAAGA,UAAU,YAAYxB,MClDbyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAMqB,c","file":"static/js/main.9de8d2a5.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nconst fetch = require(\"node-fetch\");\n\nfunction App() {\n  const [sentence, setSentence] = useState(\"\");\n\n  const updateSentence = () => {\n    let now = new Date();\n    if (now.getDay() !== 5) {\n      setSentence(\"Pas vraiment, non.\");\n    } else {\n      if (now.getHours() < 15) {\n        setSentence(\"T'as encore le temps de travailler, t'inquiète.\");\n      } else if (now.getHours() < 17) {\n        setSentence(\"Ne commence rien, attends patiemment le close-off.\");\n      } else if (now.getHours() < 18 && now.getMinutes() < 25) {\n        let difference = 30 - now.getMinutes();\n        setSentence(`Normalement dans ${difference} minutes (crois-y).`);\n      } else if (now.getHours() < 18) {\n        setSentence(`Close-off dans 5'.`);\n      } else {\n        setSentence(\"Là c'est bizarre quand même...\");\n      }\n    }\n  };\n\n  fetch(\"https://blague.xyz/api/joke/day\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization:\n        \"1yUZZzjYNN5d-5tmmjbuCq.o.NLRWjBhkBnt0IGdqyyQZXGmJSmPYms5BryYw5m4\",\n    },\n  })\n    .then((response) => {\n      console.log(\"RES\", response);\n      if (response.status !== 200) {\n        console.log(\n          \"Looks like there was a problem. Status Code: \" + response.status\n        );\n        return;\n      }\n      console.log(\"RES\", response);\n      console.log(\"JSON\", response.json());\n      return response.json();\n    })\n    .then((json) => console.log(json))\n    .catch((error) => {\n      console.error(\"Erreur : \" + error);\n    });\n\n  useEffect(() => {\n    updateSentence();\n    const interval = setInterval(updateSentence, 60 * 1000);\n\n    return () => clearInterval(interval);\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p className=\"sentence\">{sentence}</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}